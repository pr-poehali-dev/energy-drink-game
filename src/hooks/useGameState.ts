import { useState, useEffect } from 'react';
import { GameState, BoostInfo } from '../types/game';

const INITIAL_BOOSTS: BoostInfo[] = [
  {
    id: 1,
    name: "–ë—É—Å—Ç +5 –∑–∞ –∫–ª–∏–∫",
    description: "–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤ –∑–∞ –∫–ª–∏–∫ –Ω–∞ 5",
    cost: 100,
    clickValue: 5,
    purchased: false,
    icon: "‚ö°"
  },
  {
    id: 2,
    name: "–î–≤–æ–π–Ω–æ–π –∑–∞—Ä—è–¥",
    description: "–£–¥–≤–∞–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤ –∑–∞ –∫–ª–∏–∫",
    cost: 300,
    clickValue: 10,
    purchased: false,
    icon: "‚ö°‚ö°"
  },
  {
    id: 3,
    name: "–¢—É—Ä–±–æ —É—Å–∫–æ—Ä–∏—Ç–µ–ª—å",
    description: "–ú–æ—â–Ω—ã–π –±—É—Å—Ç –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∫–ª–∏–∫–µ—Ä–æ–≤",
    cost: 750,
    clickValue: 25,
    purchased: false,
    icon: "üî•"
  },
  {
    id: 4,
    name: "–ú–µ–≥–∞ —ç–Ω–µ—Ä–≥–∏—è",
    description: "–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –≤ —Ç–≤–æ–∏—Ö –∫–ª–∏–∫–∞—Ö",
    cost: 2000,
    clickValue: 50,
    purchased: false,
    icon: "üí•"
  },
  {
    id: 5,
    name: "–£–ª—å—Ç—Ä–∞ —É—Å–∏–ª–∏—Ç–µ–ª—å",
    description: "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π –±—É—Å—Ç –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ–π –º–æ—â–Ω–æ—Å—Ç–∏",
    cost: 5000,
    clickValue: 100,
    purchased: false,
    icon: "‚ö°üî•üí•"
  }
];

const INITIAL_STATE: GameState = {
  score: 0,
  clickValue: 1,
  boosts: INITIAL_BOOSTS,
  nextBoostIndex: 0
};

const LOCAL_STORAGE_KEY = 'redbull-clicker-state';

export const useGameState = () => {
  const [state, setState] = useState<GameState>(() => {
    const savedState = localStorage.getItem(LOCAL_STORAGE_KEY);
    if (savedState) {
      try {
        return JSON.parse(savedState);
      } catch (e) {
        console.error('Failed to parse saved game state', e);
      }
    }
    return INITIAL_STATE;
  });

  const [error, setError] = useState<string | null>(null);

  // Save state to localStorage whenever it changes
  useEffect(() => {
    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(state));
  }, [state]);

  // Increment score
  const incrementScore = () => {
    setState(prev => ({
      ...prev,
      score: prev.score + prev.clickValue
    }));
  };

  // Purchase a boost
  const purchaseBoost = (boostId: number) => {
    const boost = state.boosts.find(b => b.id === boostId);
    
    if (!boost) return;
    
    if (boost.purchased) {
      setError('–≠—Ç–æ—Ç –±—É—Å—Ç —É–∂–µ –∫—É–ø–ª–µ–Ω!');
      return;
    }
    
    if (state.score < boost.cost) {
      setError('–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤, –ø–ª–æ—Ö–æ –±—É—Ö–∞–ª!');
      return;
    }
    
    setState(prev => {
      // Update the purchased status of the boost
      const updatedBoosts = prev.boosts.map(b => 
        b.id === boostId ? { ...b, purchased: true } : b
      );
      
      // Calculate new click value
      const newClickValue = prev.clickValue + boost.clickValue;
      
      return {
        ...prev,
        score: prev.score - boost.cost,
        clickValue: newClickValue,
        boosts: updatedBoosts
      };
    });
  };

  // Reset error message
  const clearError = () => {
    setError(null);
  };

  return {
    state,
    incrementScore,
    purchaseBoost,
    error,
    clearError
  };
};
